//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ImportExcel {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("bdacoesDataSet4")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class bdacoesDataSet4 : global::System.Data.DataSet {
        
        private empresaDataTable tableempresa;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bdacoesDataSet4() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected bdacoesDataSet4(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["empresa"] != null)) {
                    base.Tables.Add(new empresaDataTable(ds.Tables["empresa"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public empresaDataTable empresa {
            get {
                return this.tableempresa;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            bdacoesDataSet4 cln = ((bdacoesDataSet4)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["empresa"] != null)) {
                    base.Tables.Add(new empresaDataTable(ds.Tables["empresa"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableempresa = ((empresaDataTable)(base.Tables["empresa"]));
            if ((initTable == true)) {
                if ((this.tableempresa != null)) {
                    this.tableempresa.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "bdacoesDataSet4";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/bdacoesDataSet4.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableempresa = new empresaDataTable();
            base.Tables.Add(this.tableempresa);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeempresa() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            bdacoesDataSet4 ds = new bdacoesDataSet4();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void empresaRowChangeEventHandler(object sender, empresaRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class empresaDataTable : global::System.Data.TypedTableBase<empresaRow> {
            
            private global::System.Data.DataColumn columnTipreg;
            
            private global::System.Data.DataColumn columnDatpreg;
            
            private global::System.Data.DataColumn columnCodbdi;
            
            private global::System.Data.DataColumn columnCodneg;
            
            private global::System.Data.DataColumn columnTpmerc;
            
            private global::System.Data.DataColumn columnNomres;
            
            private global::System.Data.DataColumn columnEspeci;
            
            private global::System.Data.DataColumn columnPrazot;
            
            private global::System.Data.DataColumn columnModref;
            
            private global::System.Data.DataColumn columnPreabe;
            
            private global::System.Data.DataColumn columnPremax;
            
            private global::System.Data.DataColumn columnPremin;
            
            private global::System.Data.DataColumn columnPremed;
            
            private global::System.Data.DataColumn columnPreult;
            
            private global::System.Data.DataColumn columnPreofc;
            
            private global::System.Data.DataColumn columnPreofv;
            
            private global::System.Data.DataColumn columnTotneg;
            
            private global::System.Data.DataColumn columnQuatot;
            
            private global::System.Data.DataColumn columnVoltot;
            
            private global::System.Data.DataColumn columnPreexe;
            
            private global::System.Data.DataColumn columnIndopc;
            
            private global::System.Data.DataColumn columnDatven;
            
            private global::System.Data.DataColumn columnFatcot;
            
            private global::System.Data.DataColumn columnPtoexe;
            
            private global::System.Data.DataColumn columnCodisi;
            
            private global::System.Data.DataColumn columnDismes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public empresaDataTable() {
                this.TableName = "empresa";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal empresaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected empresaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TipregColumn {
                get {
                    return this.columnTipreg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DatpregColumn {
                get {
                    return this.columnDatpreg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn CodbdiColumn {
                get {
                    return this.columnCodbdi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn CodnegColumn {
                get {
                    return this.columnCodneg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TpmercColumn {
                get {
                    return this.columnTpmerc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NomresColumn {
                get {
                    return this.columnNomres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn EspeciColumn {
                get {
                    return this.columnEspeci;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PrazotColumn {
                get {
                    return this.columnPrazot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ModrefColumn {
                get {
                    return this.columnModref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PreabeColumn {
                get {
                    return this.columnPreabe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PremaxColumn {
                get {
                    return this.columnPremax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PreminColumn {
                get {
                    return this.columnPremin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PremedColumn {
                get {
                    return this.columnPremed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PreultColumn {
                get {
                    return this.columnPreult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PreofcColumn {
                get {
                    return this.columnPreofc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PreofvColumn {
                get {
                    return this.columnPreofv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TotnegColumn {
                get {
                    return this.columnTotneg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn QuatotColumn {
                get {
                    return this.columnQuatot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn VoltotColumn {
                get {
                    return this.columnVoltot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PreexeColumn {
                get {
                    return this.columnPreexe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IndopcColumn {
                get {
                    return this.columnIndopc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DatvenColumn {
                get {
                    return this.columnDatven;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn FatcotColumn {
                get {
                    return this.columnFatcot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PtoexeColumn {
                get {
                    return this.columnPtoexe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn CodisiColumn {
                get {
                    return this.columnCodisi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DismesColumn {
                get {
                    return this.columnDismes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public empresaRow this[int index] {
                get {
                    return ((empresaRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event empresaRowChangeEventHandler empresaRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event empresaRowChangeEventHandler empresaRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event empresaRowChangeEventHandler empresaRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event empresaRowChangeEventHandler empresaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddempresaRow(empresaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public empresaRow AddempresaRow(
                        string Tipreg, 
                        string Datpreg, 
                        string Codbdi, 
                        string Codneg, 
                        string Tpmerc, 
                        string Nomres, 
                        string Especi, 
                        string Prazot, 
                        string Modref, 
                        string Preabe, 
                        string Premax, 
                        string Premin, 
                        string Premed, 
                        string Preult, 
                        string Preofc, 
                        string Preofv, 
                        string Totneg, 
                        string Quatot, 
                        string Voltot, 
                        string Preexe, 
                        string Indopc, 
                        string Datven, 
                        string Fatcot, 
                        string Ptoexe, 
                        string Codisi, 
                        string Dismes) {
                empresaRow rowempresaRow = ((empresaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Tipreg,
                        Datpreg,
                        Codbdi,
                        Codneg,
                        Tpmerc,
                        Nomres,
                        Especi,
                        Prazot,
                        Modref,
                        Preabe,
                        Premax,
                        Premin,
                        Premed,
                        Preult,
                        Preofc,
                        Preofv,
                        Totneg,
                        Quatot,
                        Voltot,
                        Preexe,
                        Indopc,
                        Datven,
                        Fatcot,
                        Ptoexe,
                        Codisi,
                        Dismes};
                rowempresaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowempresaRow);
                return rowempresaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public empresaRow FindByCodneg(string Codneg) {
                return ((empresaRow)(this.Rows.Find(new object[] {
                            Codneg})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                empresaDataTable cln = ((empresaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new empresaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnTipreg = base.Columns["Tipreg"];
                this.columnDatpreg = base.Columns["Datpreg"];
                this.columnCodbdi = base.Columns["Codbdi"];
                this.columnCodneg = base.Columns["Codneg"];
                this.columnTpmerc = base.Columns["Tpmerc"];
                this.columnNomres = base.Columns["Nomres"];
                this.columnEspeci = base.Columns["Especi"];
                this.columnPrazot = base.Columns["Prazot"];
                this.columnModref = base.Columns["Modref"];
                this.columnPreabe = base.Columns["Preabe"];
                this.columnPremax = base.Columns["Premax"];
                this.columnPremin = base.Columns["Premin"];
                this.columnPremed = base.Columns["Premed"];
                this.columnPreult = base.Columns["Preult"];
                this.columnPreofc = base.Columns["Preofc"];
                this.columnPreofv = base.Columns["Preofv"];
                this.columnTotneg = base.Columns["Totneg"];
                this.columnQuatot = base.Columns["Quatot"];
                this.columnVoltot = base.Columns["Voltot"];
                this.columnPreexe = base.Columns["Preexe"];
                this.columnIndopc = base.Columns["Indopc"];
                this.columnDatven = base.Columns["Datven"];
                this.columnFatcot = base.Columns["Fatcot"];
                this.columnPtoexe = base.Columns["Ptoexe"];
                this.columnCodisi = base.Columns["Codisi"];
                this.columnDismes = base.Columns["Dismes"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnTipreg = new global::System.Data.DataColumn("Tipreg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipreg);
                this.columnDatpreg = new global::System.Data.DataColumn("Datpreg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatpreg);
                this.columnCodbdi = new global::System.Data.DataColumn("Codbdi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodbdi);
                this.columnCodneg = new global::System.Data.DataColumn("Codneg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodneg);
                this.columnTpmerc = new global::System.Data.DataColumn("Tpmerc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTpmerc);
                this.columnNomres = new global::System.Data.DataColumn("Nomres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNomres);
                this.columnEspeci = new global::System.Data.DataColumn("Especi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspeci);
                this.columnPrazot = new global::System.Data.DataColumn("Prazot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrazot);
                this.columnModref = new global::System.Data.DataColumn("Modref", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModref);
                this.columnPreabe = new global::System.Data.DataColumn("Preabe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreabe);
                this.columnPremax = new global::System.Data.DataColumn("Premax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremax);
                this.columnPremin = new global::System.Data.DataColumn("Premin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremin);
                this.columnPremed = new global::System.Data.DataColumn("Premed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremed);
                this.columnPreult = new global::System.Data.DataColumn("Preult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreult);
                this.columnPreofc = new global::System.Data.DataColumn("Preofc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreofc);
                this.columnPreofv = new global::System.Data.DataColumn("Preofv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreofv);
                this.columnTotneg = new global::System.Data.DataColumn("Totneg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotneg);
                this.columnQuatot = new global::System.Data.DataColumn("Quatot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuatot);
                this.columnVoltot = new global::System.Data.DataColumn("Voltot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoltot);
                this.columnPreexe = new global::System.Data.DataColumn("Preexe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreexe);
                this.columnIndopc = new global::System.Data.DataColumn("Indopc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndopc);
                this.columnDatven = new global::System.Data.DataColumn("Datven", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatven);
                this.columnFatcot = new global::System.Data.DataColumn("Fatcot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFatcot);
                this.columnPtoexe = new global::System.Data.DataColumn("Ptoexe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPtoexe);
                this.columnCodisi = new global::System.Data.DataColumn("Codisi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodisi);
                this.columnDismes = new global::System.Data.DataColumn("Dismes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDismes);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCodneg}, true));
                this.columnTipreg.AllowDBNull = false;
                this.columnTipreg.MaxLength = 20;
                this.columnDatpreg.AllowDBNull = false;
                this.columnDatpreg.MaxLength = 20;
                this.columnCodbdi.AllowDBNull = false;
                this.columnCodbdi.MaxLength = 20;
                this.columnCodneg.AllowDBNull = false;
                this.columnCodneg.Unique = true;
                this.columnCodneg.MaxLength = 20;
                this.columnTpmerc.AllowDBNull = false;
                this.columnTpmerc.MaxLength = 20;
                this.columnNomres.AllowDBNull = false;
                this.columnNomres.MaxLength = 20;
                this.columnEspeci.AllowDBNull = false;
                this.columnEspeci.MaxLength = 20;
                this.columnPrazot.AllowDBNull = false;
                this.columnPrazot.MaxLength = 20;
                this.columnModref.AllowDBNull = false;
                this.columnModref.MaxLength = 20;
                this.columnPreabe.AllowDBNull = false;
                this.columnPreabe.MaxLength = 20;
                this.columnPremax.AllowDBNull = false;
                this.columnPremax.MaxLength = 20;
                this.columnPremin.AllowDBNull = false;
                this.columnPremin.MaxLength = 20;
                this.columnPremed.AllowDBNull = false;
                this.columnPremed.MaxLength = 20;
                this.columnPreult.AllowDBNull = false;
                this.columnPreult.MaxLength = 20;
                this.columnPreofc.AllowDBNull = false;
                this.columnPreofc.MaxLength = 20;
                this.columnPreofv.AllowDBNull = false;
                this.columnPreofv.MaxLength = 20;
                this.columnTotneg.AllowDBNull = false;
                this.columnTotneg.MaxLength = 20;
                this.columnQuatot.AllowDBNull = false;
                this.columnQuatot.MaxLength = 20;
                this.columnVoltot.AllowDBNull = false;
                this.columnVoltot.MaxLength = 20;
                this.columnPreexe.AllowDBNull = false;
                this.columnPreexe.MaxLength = 20;
                this.columnIndopc.AllowDBNull = false;
                this.columnIndopc.MaxLength = 20;
                this.columnDatven.AllowDBNull = false;
                this.columnDatven.MaxLength = 20;
                this.columnFatcot.AllowDBNull = false;
                this.columnFatcot.MaxLength = 20;
                this.columnPtoexe.AllowDBNull = false;
                this.columnPtoexe.MaxLength = 20;
                this.columnCodisi.AllowDBNull = false;
                this.columnCodisi.MaxLength = 20;
                this.columnDismes.AllowDBNull = false;
                this.columnDismes.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public empresaRow NewempresaRow() {
                return ((empresaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new empresaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(empresaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.empresaRowChanged != null)) {
                    this.empresaRowChanged(this, new empresaRowChangeEvent(((empresaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.empresaRowChanging != null)) {
                    this.empresaRowChanging(this, new empresaRowChangeEvent(((empresaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.empresaRowDeleted != null)) {
                    this.empresaRowDeleted(this, new empresaRowChangeEvent(((empresaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.empresaRowDeleting != null)) {
                    this.empresaRowDeleting(this, new empresaRowChangeEvent(((empresaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveempresaRow(empresaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                bdacoesDataSet4 ds = new bdacoesDataSet4();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "empresaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class empresaRow : global::System.Data.DataRow {
            
            private empresaDataTable tableempresa;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal empresaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableempresa = ((empresaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Tipreg {
                get {
                    return ((string)(this[this.tableempresa.TipregColumn]));
                }
                set {
                    this[this.tableempresa.TipregColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Datpreg {
                get {
                    return ((string)(this[this.tableempresa.DatpregColumn]));
                }
                set {
                    this[this.tableempresa.DatpregColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Codbdi {
                get {
                    return ((string)(this[this.tableempresa.CodbdiColumn]));
                }
                set {
                    this[this.tableempresa.CodbdiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Codneg {
                get {
                    return ((string)(this[this.tableempresa.CodnegColumn]));
                }
                set {
                    this[this.tableempresa.CodnegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Tpmerc {
                get {
                    return ((string)(this[this.tableempresa.TpmercColumn]));
                }
                set {
                    this[this.tableempresa.TpmercColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Nomres {
                get {
                    return ((string)(this[this.tableempresa.NomresColumn]));
                }
                set {
                    this[this.tableempresa.NomresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Especi {
                get {
                    return ((string)(this[this.tableempresa.EspeciColumn]));
                }
                set {
                    this[this.tableempresa.EspeciColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Prazot {
                get {
                    return ((string)(this[this.tableempresa.PrazotColumn]));
                }
                set {
                    this[this.tableempresa.PrazotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Modref {
                get {
                    return ((string)(this[this.tableempresa.ModrefColumn]));
                }
                set {
                    this[this.tableempresa.ModrefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Preabe {
                get {
                    return ((string)(this[this.tableempresa.PreabeColumn]));
                }
                set {
                    this[this.tableempresa.PreabeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Premax {
                get {
                    return ((string)(this[this.tableempresa.PremaxColumn]));
                }
                set {
                    this[this.tableempresa.PremaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Premin {
                get {
                    return ((string)(this[this.tableempresa.PreminColumn]));
                }
                set {
                    this[this.tableempresa.PreminColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Premed {
                get {
                    return ((string)(this[this.tableempresa.PremedColumn]));
                }
                set {
                    this[this.tableempresa.PremedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Preult {
                get {
                    return ((string)(this[this.tableempresa.PreultColumn]));
                }
                set {
                    this[this.tableempresa.PreultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Preofc {
                get {
                    return ((string)(this[this.tableempresa.PreofcColumn]));
                }
                set {
                    this[this.tableempresa.PreofcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Preofv {
                get {
                    return ((string)(this[this.tableempresa.PreofvColumn]));
                }
                set {
                    this[this.tableempresa.PreofvColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Totneg {
                get {
                    return ((string)(this[this.tableempresa.TotnegColumn]));
                }
                set {
                    this[this.tableempresa.TotnegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Quatot {
                get {
                    return ((string)(this[this.tableempresa.QuatotColumn]));
                }
                set {
                    this[this.tableempresa.QuatotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Voltot {
                get {
                    return ((string)(this[this.tableempresa.VoltotColumn]));
                }
                set {
                    this[this.tableempresa.VoltotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Preexe {
                get {
                    return ((string)(this[this.tableempresa.PreexeColumn]));
                }
                set {
                    this[this.tableempresa.PreexeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Indopc {
                get {
                    return ((string)(this[this.tableempresa.IndopcColumn]));
                }
                set {
                    this[this.tableempresa.IndopcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Datven {
                get {
                    return ((string)(this[this.tableempresa.DatvenColumn]));
                }
                set {
                    this[this.tableempresa.DatvenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Fatcot {
                get {
                    return ((string)(this[this.tableempresa.FatcotColumn]));
                }
                set {
                    this[this.tableempresa.FatcotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Ptoexe {
                get {
                    return ((string)(this[this.tableempresa.PtoexeColumn]));
                }
                set {
                    this[this.tableempresa.PtoexeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Codisi {
                get {
                    return ((string)(this[this.tableempresa.CodisiColumn]));
                }
                set {
                    this[this.tableempresa.CodisiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Dismes {
                get {
                    return ((string)(this[this.tableempresa.DismesColumn]));
                }
                set {
                    this[this.tableempresa.DismesColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class empresaRowChangeEvent : global::System.EventArgs {
            
            private empresaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public empresaRowChangeEvent(empresaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public empresaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ImportExcel.bdacoesDataSet4TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class empresaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public empresaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "empresa";
            tableMapping.ColumnMappings.Add("Tipreg", "Tipreg");
            tableMapping.ColumnMappings.Add("Datpreg", "Datpreg");
            tableMapping.ColumnMappings.Add("Codbdi", "Codbdi");
            tableMapping.ColumnMappings.Add("Codneg", "Codneg");
            tableMapping.ColumnMappings.Add("Tpmerc", "Tpmerc");
            tableMapping.ColumnMappings.Add("Nomres", "Nomres");
            tableMapping.ColumnMappings.Add("Especi", "Especi");
            tableMapping.ColumnMappings.Add("Prazot", "Prazot");
            tableMapping.ColumnMappings.Add("Modref", "Modref");
            tableMapping.ColumnMappings.Add("Preabe", "Preabe");
            tableMapping.ColumnMappings.Add("Premax", "Premax");
            tableMapping.ColumnMappings.Add("Premin", "Premin");
            tableMapping.ColumnMappings.Add("Premed", "Premed");
            tableMapping.ColumnMappings.Add("Preult", "Preult");
            tableMapping.ColumnMappings.Add("Preofc", "Preofc");
            tableMapping.ColumnMappings.Add("Preofv", "Preofv");
            tableMapping.ColumnMappings.Add("Totneg", "Totneg");
            tableMapping.ColumnMappings.Add("Quatot", "Quatot");
            tableMapping.ColumnMappings.Add("Voltot", "Voltot");
            tableMapping.ColumnMappings.Add("Preexe", "Preexe");
            tableMapping.ColumnMappings.Add("Indopc", "Indopc");
            tableMapping.ColumnMappings.Add("Datven", "Datven");
            tableMapping.ColumnMappings.Add("Fatcot", "Fatcot");
            tableMapping.ColumnMappings.Add("Ptoexe", "Ptoexe");
            tableMapping.ColumnMappings.Add("Codisi", "Codisi");
            tableMapping.ColumnMappings.Add("Dismes", "Dismes");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[empresa] WHERE (([Tipreg] = @Original_Tipreg) AND ([Datpreg] = @Original_Datpreg) AND ([Codbdi] = @Original_Codbdi) AND ([Codneg] = @Original_Codneg) AND ([Tpmerc] = @Original_Tpmerc) AND ([Nomres] = @Original_Nomres) AND ([Especi] = @Original_Especi) AND ([Prazot] = @Original_Prazot) AND ([Modref] = @Original_Modref) AND ([Preabe] = @Original_Preabe) AND ([Premax] = @Original_Premax) AND ([Premin] = @Original_Premin) AND ([Premed] = @Original_Premed) AND ([Preult] = @Original_Preult) AND ([Preofc] = @Original_Preofc) AND ([Preofv] = @Original_Preofv) AND ([Totneg] = @Original_Totneg) AND ([Quatot] = @Original_Quatot) AND ([Voltot] = @Original_Voltot) AND ([Preexe] = @Original_Preexe) AND ([Indopc] = @Original_Indopc) AND ([Datven] = @Original_Datven) AND ([Fatcot] = @Original_Fatcot) AND ([Ptoexe] = @Original_Ptoexe) AND ([Codisi] = @Original_Codisi) AND ([Dismes] = @Original_Dismes))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tipreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tipreg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Datpreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datpreg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Codbdi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codbdi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Codneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codneg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tpmerc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tpmerc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nomres", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nomres", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Especi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Especi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Prazot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Prazot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Modref", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Modref", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preabe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preabe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Premax", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premax", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Premin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Premed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preult", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preofc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preofv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofv", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Totneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Totneg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quatot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quatot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Voltot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Voltot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preexe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Indopc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Indopc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Datven", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datven", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Fatcot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Fatcot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ptoexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ptoexe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Codisi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codisi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dismes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dismes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[empresa] ([Tipreg], [Datpreg], [Codbdi], [Codneg], [Tpmerc], [Nomres], [Especi], [Prazot], [Modref], [Preabe], [Premax], [Premin], [Premed], [Preult], [Preofc], [Preofv], [Totneg], [Quatot], [Voltot], [Preexe], [Indopc], [Datven], [Fatcot], [Ptoexe], [Codisi], [Dismes]) VALUES (@Tipreg, @Datpreg, @Codbdi, @Codneg, @Tpmerc, @Nomres, @Especi, @Prazot, @Modref, @Preabe, @Premax, @Premin, @Premed, @Preult, @Preofc, @Preofv, @Totneg, @Quatot, @Voltot, @Preexe, @Indopc, @Datven, @Fatcot, @Ptoexe, @Codisi, @Dismes);
SELECT Tipreg, Datpreg, Codbdi, Codneg, Tpmerc, Nomres, Especi, Prazot, Modref, Preabe, Premax, Premin, Premed, Preult, Preofc, Preofv, Totneg, Quatot, Voltot, Preexe, Indopc, Datven, Fatcot, Ptoexe, Codisi, Dismes FROM empresa WHERE (Codneg = @Codneg)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tipreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tipreg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Datpreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datpreg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Codbdi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codbdi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Codneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codneg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tpmerc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tpmerc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nomres", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nomres", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Especi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Especi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Prazot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Prazot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Modref", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Modref", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preabe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preabe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Premax", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Premin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Premed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preofc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preofv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofv", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Totneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Totneg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quatot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quatot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Voltot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Voltot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preexe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Indopc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Indopc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Datven", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datven", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Fatcot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Fatcot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ptoexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ptoexe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Codisi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codisi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dismes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dismes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[empresa] SET [Tipreg] = @Tipreg, [Datpreg] = @Datpreg, [Codbdi] = @" +
                "Codbdi, [Codneg] = @Codneg, [Tpmerc] = @Tpmerc, [Nomres] = @Nomres, [Especi] = @" +
                "Especi, [Prazot] = @Prazot, [Modref] = @Modref, [Preabe] = @Preabe, [Premax] = @" +
                "Premax, [Premin] = @Premin, [Premed] = @Premed, [Preult] = @Preult, [Preofc] = @" +
                "Preofc, [Preofv] = @Preofv, [Totneg] = @Totneg, [Quatot] = @Quatot, [Voltot] = @" +
                "Voltot, [Preexe] = @Preexe, [Indopc] = @Indopc, [Datven] = @Datven, [Fatcot] = @" +
                "Fatcot, [Ptoexe] = @Ptoexe, [Codisi] = @Codisi, [Dismes] = @Dismes WHERE (([Tipr" +
                "eg] = @Original_Tipreg) AND ([Datpreg] = @Original_Datpreg) AND ([Codbdi] = @Ori" +
                "ginal_Codbdi) AND ([Codneg] = @Original_Codneg) AND ([Tpmerc] = @Original_Tpmerc" +
                ") AND ([Nomres] = @Original_Nomres) AND ([Especi] = @Original_Especi) AND ([Praz" +
                "ot] = @Original_Prazot) AND ([Modref] = @Original_Modref) AND ([Preabe] = @Origi" +
                "nal_Preabe) AND ([Premax] = @Original_Premax) AND ([Premin] = @Original_Premin) " +
                "AND ([Premed] = @Original_Premed) AND ([Preult] = @Original_Preult) AND ([Preofc" +
                "] = @Original_Preofc) AND ([Preofv] = @Original_Preofv) AND ([Totneg] = @Origina" +
                "l_Totneg) AND ([Quatot] = @Original_Quatot) AND ([Voltot] = @Original_Voltot) AN" +
                "D ([Preexe] = @Original_Preexe) AND ([Indopc] = @Original_Indopc) AND ([Datven] " +
                "= @Original_Datven) AND ([Fatcot] = @Original_Fatcot) AND ([Ptoexe] = @Original_" +
                "Ptoexe) AND ([Codisi] = @Original_Codisi) AND ([Dismes] = @Original_Dismes));\r\nS" +
                "ELECT Tipreg, Datpreg, Codbdi, Codneg, Tpmerc, Nomres, Especi, Prazot, Modref, P" +
                "reabe, Premax, Premin, Premed, Preult, Preofc, Preofv, Totneg, Quatot, Voltot, P" +
                "reexe, Indopc, Datven, Fatcot, Ptoexe, Codisi, Dismes FROM empresa WHERE (Codneg" +
                " = @Codneg)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tipreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tipreg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Datpreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datpreg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Codbdi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codbdi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Codneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codneg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tpmerc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tpmerc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Nomres", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nomres", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Especi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Especi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Prazot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Prazot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Modref", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Modref", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preabe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preabe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Premax", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Premin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Premed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preofc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preofv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofv", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Totneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Totneg", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quatot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quatot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Voltot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Voltot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Preexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preexe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Indopc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Indopc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Datven", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datven", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Fatcot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Fatcot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ptoexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ptoexe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Codisi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codisi", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Dismes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dismes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tipreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tipreg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Datpreg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datpreg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Codbdi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codbdi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Codneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codneg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tpmerc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tpmerc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Nomres", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Nomres", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Especi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Especi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Prazot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Prazot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Modref", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Modref", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preabe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preabe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Premax", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premax", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Premin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Premed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Premed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preult", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preofc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preofv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preofv", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Totneg", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Totneg", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quatot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quatot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Voltot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Voltot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Preexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Preexe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Indopc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Indopc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Datven", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Datven", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Fatcot", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Fatcot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ptoexe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ptoexe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Codisi", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Codisi", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Dismes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Dismes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ImportExcel.Properties.Settings.Default.bdacoes;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Tipreg, Datpreg, Codbdi, Codneg, Tpmerc, Nomres, Especi, Prazot, Modref, P" +
                "reabe, Premax, Premin, Premed, Preult, Preofc, Preofv, Totneg, Quatot, Voltot, P" +
                "reexe, Indopc, Datven, Fatcot, Ptoexe, Codisi, Dismes FROM dbo.empresa";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(bdacoesDataSet4.empresaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual bdacoesDataSet4.empresaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            bdacoesDataSet4.empresaDataTable dataTable = new bdacoesDataSet4.empresaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(bdacoesDataSet4.empresaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(bdacoesDataSet4 dataSet) {
            return this.Adapter.Update(dataSet, "empresa");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_Tipreg, 
                    string Original_Datpreg, 
                    string Original_Codbdi, 
                    string Original_Codneg, 
                    string Original_Tpmerc, 
                    string Original_Nomres, 
                    string Original_Especi, 
                    string Original_Prazot, 
                    string Original_Modref, 
                    string Original_Preabe, 
                    string Original_Premax, 
                    string Original_Premin, 
                    string Original_Premed, 
                    string Original_Preult, 
                    string Original_Preofc, 
                    string Original_Preofv, 
                    string Original_Totneg, 
                    string Original_Quatot, 
                    string Original_Voltot, 
                    string Original_Preexe, 
                    string Original_Indopc, 
                    string Original_Datven, 
                    string Original_Fatcot, 
                    string Original_Ptoexe, 
                    string Original_Codisi, 
                    string Original_Dismes) {
            if ((Original_Tipreg == null)) {
                throw new global::System.ArgumentNullException("Original_Tipreg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Tipreg));
            }
            if ((Original_Datpreg == null)) {
                throw new global::System.ArgumentNullException("Original_Datpreg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Datpreg));
            }
            if ((Original_Codbdi == null)) {
                throw new global::System.ArgumentNullException("Original_Codbdi");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Codbdi));
            }
            if ((Original_Codneg == null)) {
                throw new global::System.ArgumentNullException("Original_Codneg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Codneg));
            }
            if ((Original_Tpmerc == null)) {
                throw new global::System.ArgumentNullException("Original_Tpmerc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Tpmerc));
            }
            if ((Original_Nomres == null)) {
                throw new global::System.ArgumentNullException("Original_Nomres");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Nomres));
            }
            if ((Original_Especi == null)) {
                throw new global::System.ArgumentNullException("Original_Especi");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Especi));
            }
            if ((Original_Prazot == null)) {
                throw new global::System.ArgumentNullException("Original_Prazot");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Prazot));
            }
            if ((Original_Modref == null)) {
                throw new global::System.ArgumentNullException("Original_Modref");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Modref));
            }
            if ((Original_Preabe == null)) {
                throw new global::System.ArgumentNullException("Original_Preabe");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Preabe));
            }
            if ((Original_Premax == null)) {
                throw new global::System.ArgumentNullException("Original_Premax");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Premax));
            }
            if ((Original_Premin == null)) {
                throw new global::System.ArgumentNullException("Original_Premin");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_Premin));
            }
            if ((Original_Premed == null)) {
                throw new global::System.ArgumentNullException("Original_Premed");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Premed));
            }
            if ((Original_Preult == null)) {
                throw new global::System.ArgumentNullException("Original_Preult");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_Preult));
            }
            if ((Original_Preofc == null)) {
                throw new global::System.ArgumentNullException("Original_Preofc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Preofc));
            }
            if ((Original_Preofv == null)) {
                throw new global::System.ArgumentNullException("Original_Preofv");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Preofv));
            }
            if ((Original_Totneg == null)) {
                throw new global::System.ArgumentNullException("Original_Totneg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Totneg));
            }
            if ((Original_Quatot == null)) {
                throw new global::System.ArgumentNullException("Original_Quatot");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_Quatot));
            }
            if ((Original_Voltot == null)) {
                throw new global::System.ArgumentNullException("Original_Voltot");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Voltot));
            }
            if ((Original_Preexe == null)) {
                throw new global::System.ArgumentNullException("Original_Preexe");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_Preexe));
            }
            if ((Original_Indopc == null)) {
                throw new global::System.ArgumentNullException("Original_Indopc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Indopc));
            }
            if ((Original_Datven == null)) {
                throw new global::System.ArgumentNullException("Original_Datven");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_Datven));
            }
            if ((Original_Fatcot == null)) {
                throw new global::System.ArgumentNullException("Original_Fatcot");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Fatcot));
            }
            if ((Original_Ptoexe == null)) {
                throw new global::System.ArgumentNullException("Original_Ptoexe");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_Ptoexe));
            }
            if ((Original_Codisi == null)) {
                throw new global::System.ArgumentNullException("Original_Codisi");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_Codisi));
            }
            if ((Original_Dismes == null)) {
                throw new global::System.ArgumentNullException("Original_Dismes");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_Dismes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Tipreg, 
                    string Datpreg, 
                    string Codbdi, 
                    string Codneg, 
                    string Tpmerc, 
                    string Nomres, 
                    string Especi, 
                    string Prazot, 
                    string Modref, 
                    string Preabe, 
                    string Premax, 
                    string Premin, 
                    string Premed, 
                    string Preult, 
                    string Preofc, 
                    string Preofv, 
                    string Totneg, 
                    string Quatot, 
                    string Voltot, 
                    string Preexe, 
                    string Indopc, 
                    string Datven, 
                    string Fatcot, 
                    string Ptoexe, 
                    string Codisi, 
                    string Dismes) {
            if ((Tipreg == null)) {
                throw new global::System.ArgumentNullException("Tipreg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Tipreg));
            }
            if ((Datpreg == null)) {
                throw new global::System.ArgumentNullException("Datpreg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Datpreg));
            }
            if ((Codbdi == null)) {
                throw new global::System.ArgumentNullException("Codbdi");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Codbdi));
            }
            if ((Codneg == null)) {
                throw new global::System.ArgumentNullException("Codneg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Codneg));
            }
            if ((Tpmerc == null)) {
                throw new global::System.ArgumentNullException("Tpmerc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Tpmerc));
            }
            if ((Nomres == null)) {
                throw new global::System.ArgumentNullException("Nomres");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Nomres));
            }
            if ((Especi == null)) {
                throw new global::System.ArgumentNullException("Especi");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Especi));
            }
            if ((Prazot == null)) {
                throw new global::System.ArgumentNullException("Prazot");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Prazot));
            }
            if ((Modref == null)) {
                throw new global::System.ArgumentNullException("Modref");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Modref));
            }
            if ((Preabe == null)) {
                throw new global::System.ArgumentNullException("Preabe");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Preabe));
            }
            if ((Premax == null)) {
                throw new global::System.ArgumentNullException("Premax");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Premax));
            }
            if ((Premin == null)) {
                throw new global::System.ArgumentNullException("Premin");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Premin));
            }
            if ((Premed == null)) {
                throw new global::System.ArgumentNullException("Premed");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Premed));
            }
            if ((Preult == null)) {
                throw new global::System.ArgumentNullException("Preult");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Preult));
            }
            if ((Preofc == null)) {
                throw new global::System.ArgumentNullException("Preofc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Preofc));
            }
            if ((Preofv == null)) {
                throw new global::System.ArgumentNullException("Preofv");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Preofv));
            }
            if ((Totneg == null)) {
                throw new global::System.ArgumentNullException("Totneg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Totneg));
            }
            if ((Quatot == null)) {
                throw new global::System.ArgumentNullException("Quatot");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Quatot));
            }
            if ((Voltot == null)) {
                throw new global::System.ArgumentNullException("Voltot");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Voltot));
            }
            if ((Preexe == null)) {
                throw new global::System.ArgumentNullException("Preexe");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Preexe));
            }
            if ((Indopc == null)) {
                throw new global::System.ArgumentNullException("Indopc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Indopc));
            }
            if ((Datven == null)) {
                throw new global::System.ArgumentNullException("Datven");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Datven));
            }
            if ((Fatcot == null)) {
                throw new global::System.ArgumentNullException("Fatcot");
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Fatcot));
            }
            if ((Ptoexe == null)) {
                throw new global::System.ArgumentNullException("Ptoexe");
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Ptoexe));
            }
            if ((Codisi == null)) {
                throw new global::System.ArgumentNullException("Codisi");
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(Codisi));
            }
            if ((Dismes == null)) {
                throw new global::System.ArgumentNullException("Dismes");
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(Dismes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Tipreg, 
                    string Datpreg, 
                    string Codbdi, 
                    string Codneg, 
                    string Tpmerc, 
                    string Nomres, 
                    string Especi, 
                    string Prazot, 
                    string Modref, 
                    string Preabe, 
                    string Premax, 
                    string Premin, 
                    string Premed, 
                    string Preult, 
                    string Preofc, 
                    string Preofv, 
                    string Totneg, 
                    string Quatot, 
                    string Voltot, 
                    string Preexe, 
                    string Indopc, 
                    string Datven, 
                    string Fatcot, 
                    string Ptoexe, 
                    string Codisi, 
                    string Dismes, 
                    string Original_Tipreg, 
                    string Original_Datpreg, 
                    string Original_Codbdi, 
                    string Original_Codneg, 
                    string Original_Tpmerc, 
                    string Original_Nomres, 
                    string Original_Especi, 
                    string Original_Prazot, 
                    string Original_Modref, 
                    string Original_Preabe, 
                    string Original_Premax, 
                    string Original_Premin, 
                    string Original_Premed, 
                    string Original_Preult, 
                    string Original_Preofc, 
                    string Original_Preofv, 
                    string Original_Totneg, 
                    string Original_Quatot, 
                    string Original_Voltot, 
                    string Original_Preexe, 
                    string Original_Indopc, 
                    string Original_Datven, 
                    string Original_Fatcot, 
                    string Original_Ptoexe, 
                    string Original_Codisi, 
                    string Original_Dismes) {
            if ((Tipreg == null)) {
                throw new global::System.ArgumentNullException("Tipreg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Tipreg));
            }
            if ((Datpreg == null)) {
                throw new global::System.ArgumentNullException("Datpreg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Datpreg));
            }
            if ((Codbdi == null)) {
                throw new global::System.ArgumentNullException("Codbdi");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Codbdi));
            }
            if ((Codneg == null)) {
                throw new global::System.ArgumentNullException("Codneg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Codneg));
            }
            if ((Tpmerc == null)) {
                throw new global::System.ArgumentNullException("Tpmerc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Tpmerc));
            }
            if ((Nomres == null)) {
                throw new global::System.ArgumentNullException("Nomres");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Nomres));
            }
            if ((Especi == null)) {
                throw new global::System.ArgumentNullException("Especi");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Especi));
            }
            if ((Prazot == null)) {
                throw new global::System.ArgumentNullException("Prazot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Prazot));
            }
            if ((Modref == null)) {
                throw new global::System.ArgumentNullException("Modref");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Modref));
            }
            if ((Preabe == null)) {
                throw new global::System.ArgumentNullException("Preabe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Preabe));
            }
            if ((Premax == null)) {
                throw new global::System.ArgumentNullException("Premax");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Premax));
            }
            if ((Premin == null)) {
                throw new global::System.ArgumentNullException("Premin");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Premin));
            }
            if ((Premed == null)) {
                throw new global::System.ArgumentNullException("Premed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Premed));
            }
            if ((Preult == null)) {
                throw new global::System.ArgumentNullException("Preult");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Preult));
            }
            if ((Preofc == null)) {
                throw new global::System.ArgumentNullException("Preofc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Preofc));
            }
            if ((Preofv == null)) {
                throw new global::System.ArgumentNullException("Preofv");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Preofv));
            }
            if ((Totneg == null)) {
                throw new global::System.ArgumentNullException("Totneg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Totneg));
            }
            if ((Quatot == null)) {
                throw new global::System.ArgumentNullException("Quatot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Quatot));
            }
            if ((Voltot == null)) {
                throw new global::System.ArgumentNullException("Voltot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Voltot));
            }
            if ((Preexe == null)) {
                throw new global::System.ArgumentNullException("Preexe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Preexe));
            }
            if ((Indopc == null)) {
                throw new global::System.ArgumentNullException("Indopc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Indopc));
            }
            if ((Datven == null)) {
                throw new global::System.ArgumentNullException("Datven");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Datven));
            }
            if ((Fatcot == null)) {
                throw new global::System.ArgumentNullException("Fatcot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Fatcot));
            }
            if ((Ptoexe == null)) {
                throw new global::System.ArgumentNullException("Ptoexe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Ptoexe));
            }
            if ((Codisi == null)) {
                throw new global::System.ArgumentNullException("Codisi");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Codisi));
            }
            if ((Dismes == null)) {
                throw new global::System.ArgumentNullException("Dismes");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Dismes));
            }
            if ((Original_Tipreg == null)) {
                throw new global::System.ArgumentNullException("Original_Tipreg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_Tipreg));
            }
            if ((Original_Datpreg == null)) {
                throw new global::System.ArgumentNullException("Original_Datpreg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_Datpreg));
            }
            if ((Original_Codbdi == null)) {
                throw new global::System.ArgumentNullException("Original_Codbdi");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_Codbdi));
            }
            if ((Original_Codneg == null)) {
                throw new global::System.ArgumentNullException("Original_Codneg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_Codneg));
            }
            if ((Original_Tpmerc == null)) {
                throw new global::System.ArgumentNullException("Original_Tpmerc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Tpmerc));
            }
            if ((Original_Nomres == null)) {
                throw new global::System.ArgumentNullException("Original_Nomres");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Nomres));
            }
            if ((Original_Especi == null)) {
                throw new global::System.ArgumentNullException("Original_Especi");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_Especi));
            }
            if ((Original_Prazot == null)) {
                throw new global::System.ArgumentNullException("Original_Prazot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_Prazot));
            }
            if ((Original_Modref == null)) {
                throw new global::System.ArgumentNullException("Original_Modref");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Modref));
            }
            if ((Original_Preabe == null)) {
                throw new global::System.ArgumentNullException("Original_Preabe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_Preabe));
            }
            if ((Original_Premax == null)) {
                throw new global::System.ArgumentNullException("Original_Premax");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_Premax));
            }
            if ((Original_Premin == null)) {
                throw new global::System.ArgumentNullException("Original_Premin");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_Premin));
            }
            if ((Original_Premed == null)) {
                throw new global::System.ArgumentNullException("Original_Premed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_Premed));
            }
            if ((Original_Preult == null)) {
                throw new global::System.ArgumentNullException("Original_Preult");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_Preult));
            }
            if ((Original_Preofc == null)) {
                throw new global::System.ArgumentNullException("Original_Preofc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_Preofc));
            }
            if ((Original_Preofv == null)) {
                throw new global::System.ArgumentNullException("Original_Preofv");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_Preofv));
            }
            if ((Original_Totneg == null)) {
                throw new global::System.ArgumentNullException("Original_Totneg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_Totneg));
            }
            if ((Original_Quatot == null)) {
                throw new global::System.ArgumentNullException("Original_Quatot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_Quatot));
            }
            if ((Original_Voltot == null)) {
                throw new global::System.ArgumentNullException("Original_Voltot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_Voltot));
            }
            if ((Original_Preexe == null)) {
                throw new global::System.ArgumentNullException("Original_Preexe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_Preexe));
            }
            if ((Original_Indopc == null)) {
                throw new global::System.ArgumentNullException("Original_Indopc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_Indopc));
            }
            if ((Original_Datven == null)) {
                throw new global::System.ArgumentNullException("Original_Datven");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_Datven));
            }
            if ((Original_Fatcot == null)) {
                throw new global::System.ArgumentNullException("Original_Fatcot");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_Fatcot));
            }
            if ((Original_Ptoexe == null)) {
                throw new global::System.ArgumentNullException("Original_Ptoexe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_Ptoexe));
            }
            if ((Original_Codisi == null)) {
                throw new global::System.ArgumentNullException("Original_Codisi");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_Codisi));
            }
            if ((Original_Dismes == null)) {
                throw new global::System.ArgumentNullException("Original_Dismes");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_Dismes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Tipreg, 
                    string Datpreg, 
                    string Codbdi, 
                    string Tpmerc, 
                    string Nomres, 
                    string Especi, 
                    string Prazot, 
                    string Modref, 
                    string Preabe, 
                    string Premax, 
                    string Premin, 
                    string Premed, 
                    string Preult, 
                    string Preofc, 
                    string Preofv, 
                    string Totneg, 
                    string Quatot, 
                    string Voltot, 
                    string Preexe, 
                    string Indopc, 
                    string Datven, 
                    string Fatcot, 
                    string Ptoexe, 
                    string Codisi, 
                    string Dismes, 
                    string Original_Tipreg, 
                    string Original_Datpreg, 
                    string Original_Codbdi, 
                    string Original_Codneg, 
                    string Original_Tpmerc, 
                    string Original_Nomres, 
                    string Original_Especi, 
                    string Original_Prazot, 
                    string Original_Modref, 
                    string Original_Preabe, 
                    string Original_Premax, 
                    string Original_Premin, 
                    string Original_Premed, 
                    string Original_Preult, 
                    string Original_Preofc, 
                    string Original_Preofv, 
                    string Original_Totneg, 
                    string Original_Quatot, 
                    string Original_Voltot, 
                    string Original_Preexe, 
                    string Original_Indopc, 
                    string Original_Datven, 
                    string Original_Fatcot, 
                    string Original_Ptoexe, 
                    string Original_Codisi, 
                    string Original_Dismes) {
            return this.Update(Tipreg, Datpreg, Codbdi, Original_Codneg, Tpmerc, Nomres, Especi, Prazot, Modref, Preabe, Premax, Premin, Premed, Preult, Preofc, Preofv, Totneg, Quatot, Voltot, Preexe, Indopc, Datven, Fatcot, Ptoexe, Codisi, Dismes, Original_Tipreg, Original_Datpreg, Original_Codbdi, Original_Codneg, Original_Tpmerc, Original_Nomres, Original_Especi, Original_Prazot, Original_Modref, Original_Preabe, Original_Premax, Original_Premin, Original_Premed, Original_Preult, Original_Preofc, Original_Preofv, Original_Totneg, Original_Quatot, Original_Voltot, Original_Preexe, Original_Indopc, Original_Datven, Original_Fatcot, Original_Ptoexe, Original_Codisi, Original_Dismes);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private empresaTableAdapter _empresaTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public empresaTableAdapter empresaTableAdapter {
            get {
                return this._empresaTableAdapter;
            }
            set {
                this._empresaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._empresaTableAdapter != null) 
                            && (this._empresaTableAdapter.Connection != null))) {
                    return this._empresaTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._empresaTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(bdacoesDataSet4 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._empresaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.empresa.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._empresaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(bdacoesDataSet4 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._empresaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.empresa.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._empresaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(bdacoesDataSet4 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._empresaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.empresa.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._empresaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(bdacoesDataSet4 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._empresaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._empresaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos os TableAdapters gerenciados por um TableAdapterManager devem usar a mesma " +
                        "cadeia de conexão.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager não contém informações de conexão. Defina cada propriedade Ta" +
                        "bleAdapter de TableAdapterManager como uma instância válida de TableAdapter.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Não é possível iniciar a transação. Os dados de conexão atuais não oferecem supor" +
                        "te às transações ou o estado atual não permite que a transação inicie.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._empresaTableAdapter != null)) {
                    revertConnections.Add(this._empresaTableAdapter, this._empresaTableAdapter.Connection);
                    this._empresaTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._empresaTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._empresaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._empresaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._empresaTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._empresaTableAdapter != null)) {
                    this._empresaTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._empresaTableAdapter]));
                    this._empresaTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591